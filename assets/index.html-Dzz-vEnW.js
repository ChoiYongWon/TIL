import{_ as r,e as o,h as s,f as e,g as n,i as a,j as k,r as l,o as p}from"./app-dbWqT-s3.js";const d={};function g(c,i){const h=l("RouteLink"),t=l("Mermaid");return p(),o("div",null,[i[3]||(i[3]=s("h1",{id:"pr-간-디펜던시가-많을-때-rebase-효과적으로-하는-방법",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#pr-간-디펜던시가-많을-때-rebase-효과적으로-하는-방법"},[s("span",null,"pr 간 디펜던시가 많을 때 rebase 효과적으로 하는 방법")])],-1)),s("p",null,[i[1]||(i[1]=a("아래와 같이 브랜치 간 의존성이 연쇄적으로 존재할 때(A → B → C → D), 상위 브랜치의 PR이 수정사항과 함께 머지되면 하위 브랜치들에서 rebase 시 충돌이 발생할 수 있다. 이런 상황에서 효과적으로 rebase하는 방법을 알아본다.")),i[2]||(i[2]=s("br",null,null,-1)),e(h,{to:"/notes/git-how-rebase-works/"},{default:k(()=>i[0]||(i[0]=[a("👉 rebase가 동작하는 원리")])),_:1})]),e(t,{id:"mermaid-6",code:"eJxTAIL0zBL3osSCDC4QJzk/NzezRCEzxUpBKTcxMw8qoASWTCpKzEvOUEhLTSwpLUrVTcTQ4YhPeRKGcid8ypMxlDvjU56CodwFxAOp5gIAJk9Evg=="}),i[4]||(i[4]=s("h3",{id:"문제-상황",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#문제-상황"},[s("span",null,"문제 상황")])],-1)),i[5]||(i[5]=s("ol",null,[s("li",null,[s("strong",null,"[feature-a → main]"),a(" feature-a 브랜치가 리뷰 후 "),s("code",null,"A-1 commit"),a(" 수정사항과 함께 main에 머지됨 (아래와 같은 상태)")])],-1)),e(t,{id:"mermaid-17",code:"eJxTAIL0zBL3osSCDC4QJzk/NzezRCEzxUpBKTcxMw8qoASWTCpKzEvOUEhLTSwpLUrVTcTQ4YhPeRKGcicU5Sgyuoaochmpydn5pSX47MalBeQNsEhualF6KpIJXADSMEwN"}),i[6]||(i[6]=n(`<ol start="2"><li><strong>[feature-b → main]</strong> feature-b 브랜치 PR을 오픈하기 위해 main을 rebase 해야됨</li><li><strong>[feature-b → main]</strong> feature-b는 feature-a에서 파생된 브랜치여서 main에 rebase시 feature-a의 변경사항도 같이 적용하게 된다. (<code>A commit</code>, <code>B commit</code>, <code>B-1 commit</code>)</li><li><strong>[feature-b → main]</strong> 이 과정에서 main에 머지된 <code>A-1 commit</code>과 feature-b의 <code>A commit</code>이 충돌이 일어날 확률이 높다.</li></ol><h3 id="해결-방법-rebase-onto-활용" tabindex="-1"><a class="header-anchor" href="#해결-방법-rebase-onto-활용"><span>해결 방법: rebase --onto 활용</span></a></h3><p>--onto 옵션을 사용해 특정 커밋 범위만 rebase할 수 있다</p><div class="language-sh" data-highlighter="shiki" data-ext="sh" style="--shiki-light:#abb2bf;--shiki-dark:#abb2bf;--shiki-light-bg:#282c34;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#98C379;--shiki-dark:#98C379;"> rebase</span><span style="--shiki-light:#D19A66;--shiki-dark:#D19A66;"> --onto</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;"> &lt;</span><span style="--shiki-light:#98C379;--shiki-dark:#98C379;">새로운_기준</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">점&gt; &lt;</span><span style="--shiki-light:#98C379;--shiki-dark:#98C379;">시작_커</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">밋&gt; &lt;</span><span style="--shiki-light:#98C379;--shiki-dark:#98C379;">종료_커</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">밋&gt;</span></span>
<span class="line"><span style="--shiki-light:#7F848E;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># &lt;시작_커밋&gt; ~ &lt;종료_커밋&gt; 의 커밋들만 rebase 된다</span></span></code></pre></div><p>즉, rebase 과정에서 feature-b에서의 변경사항만 main에 적용하려면</p><div class="language-sh" data-highlighter="shiki" data-ext="sh" style="--shiki-light:#abb2bf;--shiki-dark:#abb2bf;--shiki-light-bg:#282c34;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#98C379;--shiki-dark:#98C379;"> checkout</span><span style="--shiki-light:#98C379;--shiki-dark:#98C379;"> feature-b</span></span>
<span class="line"><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#98C379;--shiki-dark:#98C379;"> rebase</span><span style="--shiki-light:#D19A66;--shiki-dark:#D19A66;"> --onto</span><span style="--shiki-light:#98C379;--shiki-dark:#98C379;"> main</span><span style="--shiki-light:#98C379;--shiki-dark:#98C379;"> feature-a</span><span style="--shiki-light:#98C379;--shiki-dark:#98C379;"> feature-b</span></span></code></pre></div><p>이렇게 적용하면</p><blockquote><p>feature-a 이후부터 feature-b까지의 커밋만 main 위에 재배치하라</p></blockquote><p>라는 의미이다. 이를 통해 이미 main에 병합된 feature-a의 변경사항이 중복 적용되는 것을 방지할 수 있고, feature-a에서 수정사항이 있어도 feature-b 브랜치의 변경사항만 적용되기 때문에 충돌이 일어날 가능성을 줄일 수 있다.</p><p>즉, 앞에 3~4번 과정이 아래와 같이 적용된다</p><ol start="3"><li><strong>[feature-b → main]</strong> feature-b는 feature-a 이후 feature-b까지의 변경사항만 rebase에 적용한다. <ul><li><code>B commit</code>, <code>B-1 commit</code></li></ul></li></ol><p>최종 그림은 다음과 같다.</p>`,12)),e(t,{id:"mermaid-77",code:"eJxTAIL0zBL3osSCDC4QJzk/NzezRCEzxUpBKTcxMw8qoASWTCpKzEvOUEhLTSwpLUrVTcTQ4YiiPDkjNTk7v7QEnwZdQ+xaQHaDRXJTi9JT0UxAc0cShrFOqIYiyyBZyAUAJOdMDQ=="}),i[7]||(i[7]=n(`<h3 id="다른-브랜치에도-활용" tabindex="-1"><a class="header-anchor" href="#다른-브랜치에도-활용"><span>다른 브랜치에도 활용</span></a></h3><p>동일한 방식으로 나머지 브랜치들도 rebase 할 수 있다</p><div class="language-sh" data-highlighter="shiki" data-ext="sh" style="--shiki-light:#abb2bf;--shiki-dark:#abb2bf;--shiki-light-bg:#282c34;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#7F848E;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># feature-b가 머지된 후</span></span>
<span class="line"><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#98C379;--shiki-dark:#98C379;"> checkout</span><span style="--shiki-light:#98C379;--shiki-dark:#98C379;"> feature-c</span></span>
<span class="line"><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#98C379;--shiki-dark:#98C379;"> rebase</span><span style="--shiki-light:#D19A66;--shiki-dark:#D19A66;"> --onto</span><span style="--shiki-light:#98C379;--shiki-dark:#98C379;"> main</span><span style="--shiki-light:#98C379;--shiki-dark:#98C379;"> feature-b</span><span style="--shiki-light:#98C379;--shiki-dark:#98C379;"> feature-c</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#7F848E;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># feature-c가 머지된 후</span></span>
<span class="line"><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#98C379;--shiki-dark:#98C379;"> checkout</span><span style="--shiki-light:#98C379;--shiki-dark:#98C379;"> feature-d</span></span>
<span class="line"><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#98C379;--shiki-dark:#98C379;"> rebase</span><span style="--shiki-light:#D19A66;--shiki-dark:#D19A66;"> --onto</span><span style="--shiki-light:#98C379;--shiki-dark:#98C379;"> main</span><span style="--shiki-light:#98C379;--shiki-dark:#98C379;"> feature-c</span><span style="--shiki-light:#98C379;--shiki-dark:#98C379;"> feature-d</span></span></code></pre></div>`,3))])}const m=r(d,[["render",g],["__file","index.html.vue"]]),f=JSON.parse('{"path":"/notes/git-rebase-dependencies/","title":"pr 간 디펜던시가 많을 때 rebase 효과적으로 하는 방법","lang":"en-US","frontmatter":{"permalink":"/notes/git-rebase-dependencies/","tags":["git"],"comment":true},"headers":[{"level":3,"title":"문제 상황","slug":"문제-상황","link":"#문제-상황","children":[]},{"level":3,"title":"해결 방법: rebase --onto 활용","slug":"해결-방법-rebase-onto-활용","link":"#해결-방법-rebase-onto-활용","children":[]},{"level":3,"title":"다른 브랜치에도 활용","slug":"다른-브랜치에도-활용","link":"#다른-브랜치에도-활용","children":[]}],"git":{"updatedTime":1742113963000,"contributors":[{"name":"ChoiYongWon","username":"ChoiYongWon","email":"yongwon0824@naver.com","commits":5,"url":"https://github.com/ChoiYongWon"}],"changelog":[{"hash":"847ba953d6f6b2632bfa40eb1f7f06268a5e0940","date":1742113963000,"email":"yongwon0824@naver.com","author":"ChoiYongWon","message":"[Git] git-rebase-dependencies 예시 수정"},{"hash":"0110291977f53826dae9f09585245fb7d0d4aed2","date":1742043753000,"email":"yongwon0824@naver.com","author":"ChoiYongWon","message":"[Git] 문서 추가 - rebase나 cherry-pick시 무시되는 commit - rebase가 동작하는 원리? - pr 간 디펜던시가 많을 때 rebase 효과적으로 하는 방법 - patch-id란 무엇인가?"},{"hash":"284e20861952eaef4b2b2879665547d70e6ff7cd","date":1741696976000,"email":"yongwon0824@naver.com","author":"ChoiYongWon","message":"[git] branch에서 특정 commit id가 존재하는지 확인"},{"hash":"38d446c80961eb7e54bed5d52f24519355efe85f","date":1741588797000,"email":"yongwon0824@naver.com","author":"ChoiYongWon","message":"[ts] 신선도 추가"},{"hash":"f6b57824696f693a7872ac6a4b760fdcb840cf71","date":1741537872000,"email":"yongwon0824@naver.com","author":"ChoiYongWon","message":"feat: 기존 글 archive로 이동 및 mermaid 추가"}]},"filePathRelative":"notes/git-rebase-dependencies.md","excerpt":"\\n<p>아래와 같이 브랜치 간 의존성이 연쇄적으로 존재할 때(A → B → C → D), 상위 브랜치의 PR이 수정사항과 함께 머지되면 하위 브랜치들에서 rebase 시 충돌이 발생할 수 있다. 이런 상황에서 효과적으로 rebase하는 방법을 알아본다.<br>\\n<a href=\\"/notes/git-how-rebase-works/\\" target=\\"_blank\\">👉 rebase가 동작하는 원리</a></p>\\n<h3>문제 상황</h3>\\n<ol>\\n<li><strong>[feature-a → main]</strong> feature-a 브랜치가 리뷰 후 <code>A-1 commit</code> 수정사항과 함께 main에 머지됨 (아래와 같은 상태)</li>\\n</ol>"}');export{m as comp,f as data};
