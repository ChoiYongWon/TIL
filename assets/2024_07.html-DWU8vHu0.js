import{_ as a,e as i,g as n,o as s}from"./app-dbWqT-s3.js";const r={};function t(o,e){return s(),i("div",null,e[0]||(e[0]=[n(`<h1 id="_2024-07" tabindex="-1"><a class="header-anchor" href="#_2024-07"><span>2024. 07.</span></a></h1><h2 id="_07-01" tabindex="-1"><a class="header-anchor" href="#_07-01"><span>07. 01.</span></a></h2><h3 id="react-reconcile" tabindex="-1"><a class="header-anchor" href="#react-reconcile"><span>React Reconcile</span></a></h3><p>번역하면 재 조정이라는 뜻인데,<br> React Render 트리 (가상 돔)를 초기화 또는 업데이트 하여 실제 돔이랑 동기화 해주는 과정이다.</p><h2 id="_07-04" tabindex="-1"><a class="header-anchor" href="#_07-04"><span>07. 04.</span></a></h2><h3 id="nextjs에서-서버-컴포넌트를-렌더링하는-방법" tabindex="-1"><a class="header-anchor" href="#nextjs에서-서버-컴포넌트를-렌더링하는-방법"><span>NextJS에서 서버 컴포넌트를 렌더링하는 방법</span></a></h3><h4 id="기존-렌더링" tabindex="-1"><a class="header-anchor" href="#기존-렌더링"><span>기존 렌더링</span></a></h4><ol><li>접속시 유저는 빈 화면의 index.html을 받는다.</li><li>index.html 내에 링크 되어있는 번들 파일을 요청한다.</li><li>react가 실행된다.</li><li>reconcile (재조정) 과정이 진행된다.</li><li>DOM에 렌더링 한다.</li></ol><h4 id="nextjs-렌더링" tabindex="-1"><a class="header-anchor" href="#nextjs-렌더링"><span>NextJS 렌더링</span></a></h4><p>NextJS에서의 렌더링은 청크 단위로 이루어진다.<br> 이 때, 청크를 나누는 기준은 Route Segment와 Suspense Boundaries이다.</p><p>분리된 청크는 NextJS에서 React API를 사용하여 서버에서 RSC(React Server Component) Payload로 생성해준다.</p><blockquote><p><strong>RSC Payload란?</strong><br> React Server Component를 그리기 위한 바이너리 형태의 트리. 이 객체는 클라이언트에서 브라우저에 DOM을 업데이트하기 위해서 사용된다.</p></blockquote><p>RSC Payload의 구성요소는 다음과 같다.</p><ul><li>Server Component의 렌더링된 결과</li><li>Client Component의 Javascript 파일의 위치 (Placeholder라고도 부르며, 렌더링 된 결과는 포함되지 않는다.)</li><li>Server Component에서 Client Component로 전달하는 Props 정보</li></ul><p>그 후, NextJS는 RSC Payload와 Client Component Javascript Instructions를 이용해 미리보기 HTML을 렌더링 한다.</p><blockquote><p><strong>Client Component Javascript란?</strong><br> useState나 onClick와 같이 Client Component에서 사용되는 정보를 포함하는 객체이다.</p></blockquote><p>RSC Payload 정보는 인라인 JS 태그 내에 위치하며, Client Component Javascript Instructions는 useState의 기본값 등 초기 렌더링에 필요한 값들만 일부 참조한다.</p><p>이때 까지가 서버에서의 작업이었고,<br> 생성된 HTML 파일을 클라이언트가 전달받았을 때,</p><p>브라우저에서 HTML 내용을 즉시 렌더링하여 사용자에게 보여준다.<br> 그 후, 인라인 JS 태그 내에 있는 RSC Payload를 통해 재조정 과정을 거친다.</p><blockquote><p><strong>Reconcile (재조정) 이란?</strong><br> Server Component와 Client Component의 정보를 결합하여 Render Tree를 생성하고, 이 Render Tree를 이용해 VDOM을 구성한 후 DOM과 Sync를 맞추는 과정이다.</p></blockquote><p>마지막으로 서버에서 생성된 Client Component Javascript Instructions를 요청하여 hydrate 과정으로 마무리된다.</p><h4 id="좀-더-공부가-필요한-부분" tabindex="-1"><a class="header-anchor" href="#좀-더-공부가-필요한-부분"><span>좀 더 공부가 필요한 부분</span></a></h4><p>Reconcile 과정과 Hydrate 과정 상세화</p><h2 id="_07-06" tabindex="-1"><a class="header-anchor" href="#_07-06"><span>07. 06.</span></a></h2><h3 id="javascript-runtime-구성-요소-및-관리-주체" tabindex="-1"><a class="header-anchor" href="#javascript-runtime-구성-요소-및-관리-주체"><span>Javascript Runtime 구성 요소 및 관리 주체</span></a></h3><ul><li><code>Call Stack</code>: JavaScript 엔진(V8 등)에서 관리.</li><li><code>Task Queue</code>: 브라우저나 Node.js와 같은 JavaScript 런타임 환경에서 관리.</li><li><code>Event Loop</code>: 브라우저나 Node.js와 같은 JavaScript 런타임 환경에서 관리.</li></ul><h2 id="_07-08" tabindex="-1"><a class="header-anchor" href="#_07-08"><span>07. 08.</span></a></h2><h3 id="react의-fiber-아키텍처" tabindex="-1"><a class="header-anchor" href="#react의-fiber-아키텍처"><span>React의 Fiber 아키텍처</span></a></h3><p>React.Element가 확장되는 형태로 Hook 관련 정보가 붙는다.</p><h2 id="_07-13" tabindex="-1"><a class="header-anchor" href="#_07-13"><span>07. 13.</span></a></h2><h3 id="react에서-work란" tabindex="-1"><a class="header-anchor" href="#react에서-work란"><span>React에서 Work란?</span></a></h3><p>재조정을 하기 위해 Schedule에서 처리하는 단위.</p><h3 id="react에서-dispatchaction-이란" tabindex="-1"><a class="header-anchor" href="#react에서-dispatchaction-이란"><span>React에서 dispatchAction 이란?</span></a></h3><p>재조정을 하기 위해 Schedule에 Work를 넣어주는 함수</p><h2 id="_07-14" tabindex="-1"><a class="header-anchor" href="#_07-14"><span>07. 14.</span></a></h2><h3 id="react에서-idle-상태와-render-phase-상태의-기준" tabindex="-1"><a class="header-anchor" href="#react에서-idle-상태와-render-phase-상태의-기준"><span>React에서 Idle 상태와 Render Phase 상태의 기준</span></a></h3><p>Render Phase 진입점이 setState의 마지막 단계</p><h3 id="react에서-expirationtime" tabindex="-1"><a class="header-anchor" href="#react에서-expirationtime"><span>React에서 expirationTime</span></a></h3><p>Scheduler가 Work에게 처리 우선순위를 알려주는 기준이 expirationTime. 여기에 할당되는 값은 이벤트 발생 시점 시간</p><p>expirationTime이 클수록 우선순위가 높아짐 (expirationTime은 MAGIC_NUMBER에 performance.now()를 뺀값이어서 시간이 흐를 수록 작아짐. 즉, 나중에 발생한 이벤트일수록 작어지고, 먼저 발생한 이벤트일수록 커짐)</p><h3 id="reactfiberhooks의-역할" tabindex="-1"><a class="header-anchor" href="#reactfiberhooks의-역할"><span>ReactFiberHooks의 역할</span></a></h3><p>React의 상태 관리는 react-reconcile 패키지에서 담당한다. React는 VDOM에서 노드를 관리하기 위해 Fiber 형태로 관리하고 있으며 이는 React Element에서 확장된 정보(상태 등)를 가진 객체이다.</p><p>ReactFiberHooks는 Fiber 객체에 Hook에 관련된 정보를 마운트 시켜주는 역할을 한다. <a href="https://github.com/facebook/react/blob/main/packages/react-reconciler/src/ReactFiberHooks.js#L496" target="_blank" rel="noopener noreferrer">react-reconcile의 ReactFiber Github 링크</a><br> Fiber 객체에는 memoizedState 프로퍼티가 존재하는데 renderWithHooks 함수를 통해 momoizedState에 Hook 객체를 할당해준다.<br> Hook 객체는 LinkedList 형태로 존재하며 하나의 Hook 객체는 next로 다른 Hook 객체를 참조할 수 있다.<br> 그래서 실제 memoizedState에 할당되는 값은 첫번째 Hook 객체이며 이는 해당 Fiber에서 사용하는 모든 Hooks와 LinkedList 형태로 연결되어있다.</p><p>ReactCurrentDispatcher.current -&gt; HookDispatcherOnMount -&gt; mountState -&gt; mountWorkInProgressHook -&gt; currentlyRenderingFiber.memoizedState에 Hook 객체를 LinkedList로 mount</p><blockquote><p>mountWorkInProgressHook은 Fiber에 Hook을 LinkedList 형태로 연결시켜주는 역할</p></blockquote><h2 id="_07-16" tabindex="-1"><a class="header-anchor" href="#_07-16"><span>07. 16.</span></a></h2><h3 id="buildtime-css와-runtime-css에-대한-고찰" tabindex="-1"><a class="header-anchor" href="#buildtime-css와-runtime-css에-대한-고찰"><span>BuildTime Css와 RunTime Css에 대한 고찰</span></a></h3><p>기술 스택을 정하는 도중 Build Time Css와 Run Time Css에 대한 의문점이 들었다.</p><p>나는 이 둘의 차이점이 CSS가 적용된 상태로 오느냐 아니면 브라우저에서 JS 런타임에서 CSS를 만들어주냐의 차이점인줄 알았다. 반은 맞고 반은 틀렸다.</p><p>초기 HTML 파일을 응답받은 상태에서 브라우저에서 Preview를 보면 뼈대만 있는데 (CSS 적용 X) 여기서 부터 이상함을 감지했다.</p><blockquote><p>어? 왜 스타일이 적용 안되어있지?</p></blockquote><p>라고 생각했지만 이후 Critical Rendering Path를 생각해보면 당연한 결과였다.<br> 브라우저는 HTML을 전부 해석하기 전까진 Paint룰 안해준다.</p><p>주요 차이점은 다음과 같다.</p><p><strong>BuildTime CSS</strong></p><ul><li>link 태그에 있는 CSS 요청</li><li>CSS 파일 다운로드 및 파싱</li><li>CSSOM 생성</li><li>DOM + CSSOM을 결합하여 Render Tree 생성</li><li>Paint</li></ul><p><strong>Runtime CSS</strong></p><ul><li>script 태그 해석</li><li>Javascript에 의한 동적 스타일 변경</li><li>CSSOM 업데이트</li><li>Render Tree 재계산 및 업데이트</li><li>Paint</li><li>이후 업데이트가 있을때마다 2 ~ 6 과정 반복</li></ul><p>추가로 JS에서 Runtime으로 CSS를 생성할 때 렌더링 엔진이 JS 엔진에게 제어권을 위임하기 때문에 렌더링 과정이 수행되지 않기에 더 오래 걸린다는 점도 있다.</p><p>정리하자면 BuildTime과 RunTime 모두 초기 CSS가 Paint 전에 반영되지만 속도면에서 차이가 있다.<br> 브라우저 렌더링 방식의 중요성을 깨달았다.</p><h2 id="_07-19" tabindex="-1"><a class="header-anchor" href="#_07-19"><span>07. 19.</span></a></h2><h3 id="react-fiber-architecture" tabindex="-1"><a class="header-anchor" href="#react-fiber-architecture"><span>React Fiber Architecture</span></a></h3><p>Reconcilation 단계에서 React 16 이전 Stack Reconcilation 구조에서 Fiber Reconcilation으로 바뀐 아키텍처이다.</p><h4 id="stack-reconcilation의-단점" tabindex="-1"><a class="header-anchor" href="#stack-reconcilation의-단점"><span>Stack Reconcilation의 단점</span></a></h4><p>React는 변화를 탐지할때 상태가 변한 컴포넌트들을 모두 CallStack에서 render 메소드를 호출하여 반영한다. 이는 브라우저의 프레임 드랍을 유발할 수 있다.</p><p>브라우저는 60fps(초당 60프레임)으로 화면을 갱신하려고 한다. 이는 각 프레임 당 약 16.67ms(1000ms / 60)가 걸린다.</p><p>만약 16.67ms동안 콜스택을 비우지 못하면 브라우저가 화면을 갱신하지 못하기 때문에 프레임 드랍이 발생하는 원리이다.</p><p>즉, 대규모 렌더링이 발생할 때 React가 16.67ms내로 렌더링하지 못하면 프레임 드랍이 발생하는 문제가 있었다.</p><h4 id="fiber-architecture" tabindex="-1"><a class="header-anchor" href="#fiber-architecture"><span>Fiber Architecture</span></a></h4><p>Fiber는 React가 각각의 렌더링 작업에 대해서 스케쥴링을 가능하게 하는 아키텍쳐이고 다음과 같은 목표를 가지고 있다.</p><ul><li>작업을 중단하고 나중에 다시 진행</li><li>작업별 우선순위 지정</li><li>이전에 완료된 작업 재사용</li><li>더 이상 필요하지 않은 작업 중단</li></ul><p><a href="https://github.com/acdlite/react-fiber-architecture" target="_blank" rel="noopener noreferrer">출처 - React Fiber Architecture</a></p><p>즉, Fiber는 각각의 작업을 최대한 효율적으로 처리하고자 설계된 구조다.</p><p>그러면 각각의 스택 프레임에 우선순위를 부여한다는 의미인데 JS 환경을 이해했을때 &quot;어떻게 가능하지?&quot; 라는 의문이 생긴다. 이를 해결하기 위해 React는 <a href="https://github.com/facebook/react/blob/66df94460e27ff382c07b13d0bcc4b2778bfc201/packages/scheduler/src/forks/Scheduler.js#L188" target="_blank" rel="noopener noreferrer">workLoop</a>라는 가상의 스케줄러를 만들어서 렌더링 작업을 스케줄링한다.</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" style="--shiki-light:#abb2bf;--shiki-dark:#abb2bf;--shiki-light-bg:#282c34;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#7F848E;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// react/packages/scheduler/src/forks/Scheduler.js</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">function</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;"> workLoop</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">(...){</span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">    while</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">(...){</span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">        if</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">currentTask</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">expirationTime</span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;"> &gt;</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;"> currentTime</span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;"> &amp;&amp;</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;"> shouldYieldToHost</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">()) {</span></span>
<span class="line"><span style="--shiki-light:#7F848E;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">            // This currentTask hasn&#39;t expired, and we&#39;ve reached the deadline.</span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">            break</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">        }</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>_workLoop는 while문으로 구성되어있는데 할당된 시간 동안만 수행된다. _</p><p>workLoop는 하나의 스택 프레임으로 동작하며 호스트(브라우저)의 렌더링 주기에 맞춰서 생명주기가 정해지며, 대게 매우 짧은 생명주기 시간을 갖고있다. ex) 16.67ms</p><p>이전에 Stack 구조에서는 콜스택에 일괄로 렌더링 작업을 진행했다면, Fiber 구조는 workLoop을 콜스택에 넣고 생명주기 시간동안 while문을 반복하여 렌더링 작업을 처리하고 생명주기 시간이 끝나거나, 더이상 처리할 작업이 없을 때 제어권을 브라우저에게 반납한다.</p><blockquote><p>어? 그러면 생명주기 시간동안 렌더링 작업을 끝내지 못하면요?</p></blockquote><p>이는 브라우저에서 제공하는 <code>requestIdleCallback</code> 함수를 활용한다. 이 함수는 브라우저가 중요한 작업(렌더링, 이벤트 처리 등)을 모두 마치고 여유가 있을 때 호출해주는 콜백이다.</p><p>React는 이를 활용하여 브라우저가 여유로울때마다 workLoop를 호출하여 렌더링 작업을 수행한다.</p><blockquote><p>네? 브라우저가 여유로울때만 렌더링 작업을 할 수 있나요? 우선순위가 높은 작업은요?</p></blockquote><p><em>좀 더 알아봐야됨</em></p><p>Fiber는 우선순위에 따라 처리하는 작업의 방식도 다르다. 보통은 <code>requestIdleCallback</code>가 호출되는 시점에 처리하는데 우선순위가 높은 작업은 <code>setTimeout</code>으로 처리된다.</p><h4 id="정리" tabindex="-1"><a class="header-anchor" href="#정리"><span>정리</span></a></h4><p>즉, Fiber 구조는 React의 재조정(reconciliation) 과정을 작은 단위의 작업으로 나누어 중단과 재개가 가능하게 만들고, 작업 우선순위를 지정할 수 있게 하여 UI의 반응성과 성능을 향상시키는 내부 구현 아키텍처이다.</p><h2 id="_07-24" tabindex="-1"><a class="header-anchor" href="#_07-24"><span>07. 24.</span></a></h2><h3 id="react-비즈니스-로직-분리-자료" tabindex="-1"><a class="header-anchor" href="#react-비즈니스-로직-분리-자료"><span>React 비즈니스 로직 분리 자료</span></a></h3><p><a href="https://velog.io/@teo/MVI-Architecture" target="_blank" rel="noopener noreferrer">프론트엔드에서 비즈니스 로직과 뷰 로직 분리하기 (feat. MVI 아키텍쳐)</a><br><a href="https://medium.com/@junep/%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EC%95%84%ED%82%A4%ED%85%8D%EC%B2%98-%EB%B9%84%EC%A7%80%EB%8B%88%EC%8A%A4-%EB%A1%9C%EC%A7%81%EA%B3%BC-%EC%82%AC%EB%A1%80-f09774f53a3b" target="_blank" rel="noopener noreferrer">프론트엔드 아키텍처: 비지니스 로직과 사례</a><br><a href="https://medium.com/@junep/%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EC%95%84%ED%82%A4%ED%85%8D%EC%B2%98-api-%EC%9A%94%EC%B2%AD-%EA%B4%80%EB%A6%AC-113c31d7bcee" target="_blank" rel="noopener noreferrer">프론트엔드 아키텍처: API 요청 관리</a><br><a href="https://careerly.co.kr/qnas/7471" target="_blank" rel="noopener noreferrer">비지니스로직 분리 질문드려요!</a></p><h2 id="_07-26" tabindex="-1"><a class="header-anchor" href="#_07-26"><span>07. 26.</span></a></h2><h3 id="react-실행-흐름" tabindex="-1"><a class="header-anchor" href="#react-실행-흐름"><span>React 실행 흐름</span></a></h3><h4 id="초기화" tabindex="-1"><a class="header-anchor" href="#초기화"><span>초기화</span></a></h4><ol><li><p>진입점 (예: index.js)</p><ul><li><code>import React from &#39;react&#39;</code></li><li><code>import ReactDOM from &#39;react-dom/client&#39;</code></li><li><code>import App from &#39;./App&#39;</code></li></ul></li><li><p><code>packages/react/index.js</code></p><ul><li>React 코어 API를 내보냅니다.</li></ul></li><li><p><code>packages/react-dom/index.js</code></p><ul><li>ReactDOM API를 내보냅니다.</li></ul></li><li><p><code>packages/react-dom/src/client/ReactDOM.js</code></p><ul><li><code>createRoot()</code>: 루트 컨테이너를 생성합니다.</li></ul></li><li><p><code>packages/react-dom/src/client/ReactDOMRoot.js</code></p><ul><li><code>root.render()</code>: 애플리케이션 렌더링을 시작합니다.</li></ul></li><li><p><code>packages/react-reconciler/src/ReactFiberReconciler.js</code></p><ul><li><code>updateContainer()</code>: 컨테이너 업데이트를 시작합니다.</li></ul></li><li><p><code>packages/react-reconciler/src/ReactFiberWorkLoop.js</code></p><ul><li><code>scheduleUpdateOnFiber()</code>: Fiber 업데이트를 스케줄링합니다.</li><li><code>performSyncWorkOnRoot()</code> 또는 <code>performConcurrentWorkOnRoot()</code></li></ul></li><li><p><code>packages/react-reconciler/src/ReactFiberBeginWork.js</code></p><ul><li><code>beginWork()</code>: 각 Fiber 노드 작업을 시작합니다.</li></ul></li><li><p><code>packages/react-reconciler/src/ReactFiberHooks.js</code></p><ul><li><code>renderWithHooks()</code>: 함수 컴포넌트 렌더링 및 훅 처리</li></ul></li><li><p><code>packages/react-reconciler/src/ReactFiberClassComponent.js</code></p><ul><li>클래스 컴포넌트 처리 (해당하는 경우)</li></ul></li><li><p><code>packages/react-reconciler/src/ReactChildFiber.js</code></p><ul><li><code>reconcileChildFibers()</code>: 자식 요소 재조정</li></ul></li><li><p><code>packages/react-reconciler/src/ReactFiberCompleteWork.js</code></p><ul><li><code>completeWork()</code>: 각 Fiber 노드 작업 완료</li></ul></li><li><p><code>packages/react-reconciler/src/ReactFiberCommitWork.js</code></p><ul><li><code>commitRoot()</code>: 변경사항 DOM에 적용</li></ul></li><li><p><code>packages/react-dom/src/client/ReactDOMHostConfig.js</code></p><ul><li>DOM 조작 함수들 (예: <code>appendChild()</code>, <code>insertBefore()</code>)</li></ul></li></ol><h4 id="이벤트-처리" tabindex="-1"><a class="header-anchor" href="#이벤트-처리"><span>이벤트 처리</span></a></h4><ol start="15"><li><code>packages/react-dom/src/events/DOMPluginEventSystem.js</code><ul><li>이벤트 리스너 설정 및 처리</li></ul></li></ol><h4 id="상태-업데이트-시" tabindex="-1"><a class="header-anchor" href="#상태-업데이트-시"><span>상태 업데이트 시</span></a></h4><ol start="16"><li><code>packages/react-reconciler/src/ReactUpdateQueue.js</code><ul><li><code>enqueueUpdate()</code>: 업데이트 큐에 추가</li></ul></li></ol><h4 id="렌더링-완료-후" tabindex="-1"><a class="header-anchor" href="#렌더링-완료-후"><span>렌더링 완료 후</span></a></h4><ol start="17"><li><code>packages/react-reconciler/src/ReactFiberWorkLoop.js</code><ul><li><code>finishConcurrentRender()</code> 또는 <code>commitRootImpl()</code></li></ul></li></ol><h4 id="클린업-및-부수-효과" tabindex="-1"><a class="header-anchor" href="#클린업-및-부수-효과"><span>클린업 및 부수 효과</span></a></h4><ol start="18"><li><code>packages/react-reconciler/src/ReactFiberCommitWork.js</code><ul><li><code>commitPassiveUnmountEffects()</code>, <code>commitPassiveMountEffects()</code></li></ul></li></ol><h2 id="_07-28" tabindex="-1"><a class="header-anchor" href="#_07-28"><span>07. 28.</span></a></h2><h3 id="react-reconcile-과정-beginwork-completework" tabindex="-1"><a class="header-anchor" href="#react-reconcile-과정-beginwork-completework"><span>React Reconcile 과정 beginWork, completeWork</span></a></h3><p>beginwork -&gt; updateFunctionComponent 여기서 workInProgress.child를 반환해줌<br> 이 후 completeWork를 통해 sibling 탐색 후 존재하면 workInProgress를 sibling으로 변경 (beginWork 반복)</p><h2 id="_07-29" tabindex="-1"><a class="header-anchor" href="#_07-29"><span>07. 29.</span></a></h2><h3 id="react-beginwork에서-만들어지는-component" tabindex="-1"><a class="header-anchor" href="#react-beginwork에서-만들어지는-component"><span>React beginWork에서 만들어지는 Component</span></a></h3><p>beginWork에서 만들어지는 Class 혹은 Function 컴포넌트의 tag는 <code>IndeterminateComponent</code>이다.<br> 이후 <code>mountIndeterminateComponent()</code> 함수를 통해 mount가 된 상태에서는 tag가 바뀐다.</p><h2 id="_07-30" tabindex="-1"><a class="header-anchor" href="#_07-30"><span>07. 30.</span></a></h2><h3 id="리액트-인스턴스를-생성하고-렌더링하는-과정-feat-초기-마운트" tabindex="-1"><a class="header-anchor" href="#리액트-인스턴스를-생성하고-렌더링하는-과정-feat-초기-마운트"><span>리액트 인스턴스를 생성하고 렌더링하는 과정 feat. 초기 마운트</span></a></h3><div class="language-jsx" data-highlighter="shiki" data-ext="jsx" style="--shiki-light:#abb2bf;--shiki-dark:#abb2bf;--shiki-light-bg:#282c34;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;"> root</span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;"> ReactDOM</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;">createRoot</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">document</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;">getElementById</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#98C379;--shiki-dark:#98C379;">&quot;root&quot;</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">));</span></span>
<span class="line"><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">root</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;">render</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">(&lt;</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">App</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;"> /&gt;);</span></span></code></pre></div><p>React는 여러 호스트(앱, 브라우저)에서 사용할 수 있습니다. 그 중에서 ReactDOM은 React를 브라우저에서 그려주는 역할을 담당합니다. createRoot 메소드를 통해 브라우저에서 연결된 Container (실제 DOM)을 연결하고 FiberRootNode와 HostRoot를 생성하고 render 메소드를 통해 workInProgress에서 App 컴포넌트를 생성해서 Render, Commit Phase를 거쳐 Container에 페인팅합니다.</p>`,110)]))}const l=a(r,[["render",t],["__file","2024_07.html.vue"]]),h=JSON.parse('{"path":"/archives/2024_07.html","title":"2024. 07.","lang":"en-US","frontmatter":{"comment":true,"tags":["test"]},"headers":[{"level":2,"title":"07. 01.","slug":"_07-01","link":"#_07-01","children":[{"level":3,"title":"React Reconcile","slug":"react-reconcile","link":"#react-reconcile","children":[]}]},{"level":2,"title":"07. 04.","slug":"_07-04","link":"#_07-04","children":[{"level":3,"title":"NextJS에서 서버 컴포넌트를 렌더링하는 방법","slug":"nextjs에서-서버-컴포넌트를-렌더링하는-방법","link":"#nextjs에서-서버-컴포넌트를-렌더링하는-방법","children":[]}]},{"level":2,"title":"07. 06.","slug":"_07-06","link":"#_07-06","children":[{"level":3,"title":"Javascript Runtime 구성 요소 및 관리 주체","slug":"javascript-runtime-구성-요소-및-관리-주체","link":"#javascript-runtime-구성-요소-및-관리-주체","children":[]}]},{"level":2,"title":"07. 08.","slug":"_07-08","link":"#_07-08","children":[{"level":3,"title":"React의 Fiber 아키텍처","slug":"react의-fiber-아키텍처","link":"#react의-fiber-아키텍처","children":[]}]},{"level":2,"title":"07. 13.","slug":"_07-13","link":"#_07-13","children":[{"level":3,"title":"React에서 Work란?","slug":"react에서-work란","link":"#react에서-work란","children":[]},{"level":3,"title":"React에서 dispatchAction 이란?","slug":"react에서-dispatchaction-이란","link":"#react에서-dispatchaction-이란","children":[]}]},{"level":2,"title":"07. 14.","slug":"_07-14","link":"#_07-14","children":[{"level":3,"title":"React에서 Idle 상태와 Render Phase 상태의 기준","slug":"react에서-idle-상태와-render-phase-상태의-기준","link":"#react에서-idle-상태와-render-phase-상태의-기준","children":[]},{"level":3,"title":"React에서 expirationTime","slug":"react에서-expirationtime","link":"#react에서-expirationtime","children":[]},{"level":3,"title":"ReactFiberHooks의 역할","slug":"reactfiberhooks의-역할","link":"#reactfiberhooks의-역할","children":[]}]},{"level":2,"title":"07. 16.","slug":"_07-16","link":"#_07-16","children":[{"level":3,"title":"BuildTime Css와 RunTime Css에 대한 고찰","slug":"buildtime-css와-runtime-css에-대한-고찰","link":"#buildtime-css와-runtime-css에-대한-고찰","children":[]}]},{"level":2,"title":"07. 19.","slug":"_07-19","link":"#_07-19","children":[{"level":3,"title":"React Fiber Architecture","slug":"react-fiber-architecture","link":"#react-fiber-architecture","children":[]}]},{"level":2,"title":"07. 24.","slug":"_07-24","link":"#_07-24","children":[{"level":3,"title":"React 비즈니스 로직 분리 자료","slug":"react-비즈니스-로직-분리-자료","link":"#react-비즈니스-로직-분리-자료","children":[]}]},{"level":2,"title":"07. 26.","slug":"_07-26","link":"#_07-26","children":[{"level":3,"title":"React 실행 흐름","slug":"react-실행-흐름","link":"#react-실행-흐름","children":[]}]},{"level":2,"title":"07. 28.","slug":"_07-28","link":"#_07-28","children":[{"level":3,"title":"React Reconcile 과정 beginWork, completeWork","slug":"react-reconcile-과정-beginwork-completework","link":"#react-reconcile-과정-beginwork-completework","children":[]}]},{"level":2,"title":"07. 29.","slug":"_07-29","link":"#_07-29","children":[{"level":3,"title":"React beginWork에서 만들어지는 Component","slug":"react-beginwork에서-만들어지는-component","link":"#react-beginwork에서-만들어지는-component","children":[]}]},{"level":2,"title":"07. 30.","slug":"_07-30","link":"#_07-30","children":[{"level":3,"title":"리액트 인스턴스를 생성하고 렌더링하는 과정 feat. 초기 마운트","slug":"리액트-인스턴스를-생성하고-렌더링하는-과정-feat-초기-마운트","link":"#리액트-인스턴스를-생성하고-렌더링하는-과정-feat-초기-마운트","children":[]}]}],"git":{"updatedTime":1741537872000,"contributors":[{"name":"ChoiYongWon","username":"ChoiYongWon","email":"yongwon0824@naver.com","commits":25,"url":"https://github.com/ChoiYongWon"}],"changelog":[{"hash":"f6b57824696f693a7872ac6a4b760fdcb840cf71","date":1741537872000,"email":"yongwon0824@naver.com","author":"ChoiYongWon","message":"feat: 기존 글 archive로 이동 및 mermaid 추가"},{"hash":"46455e3cece3c992c8f153828884455559ccf4ec","date":1741473529000,"email":"yongwon0824@naver.com","author":"ChoiYongWon","message":"feat: v2로 마이그레이션"},{"hash":"925605eb02945e77ac5e75c86e61559247495d05","date":1722530867000,"email":"yongwon0824@naver.com","author":"ChoiYongWon","message":"수정"},{"hash":"081d0ec06b634460566831f18217a885ef7cf7da","date":1722268264000,"email":"yongwon0824@naver.com","author":"ChoiYongWon","message":"07. 30."},{"hash":"c938a63069a764bcd18cc358c666f2ac4e4c308e","date":1722234660000,"email":"yongwon0824@naver.com","author":"ChoiYongWon","message":"07. 29."},{"hash":"2bfd6d9795c6529d3cc376f8b7bc3eebc3c9b81f","date":1722177873000,"email":"yongwon0824@naver.com","author":"ChoiYongWon","message":"07. 28"},{"hash":"ffcaeceb8efd02d152d1ffbe540201ca19e0a785","date":1722138540000,"email":"yongwon0824@naver.com","author":"ChoiYongWon","message":"07. 28. 수정"},{"hash":"c52b31bdd749d814d0ab88102f5851eb117fa666","date":1721999895000,"email":"yongwon0824@naver.com","author":"ChoiYongWon","message":"07. 26."},{"hash":"af3d7f56fede5b238d1c7895c96033a0f1d7bbe5","date":1721905954000,"email":"yongwon0824@naver.com","author":"ChoiYongWon","message":"07. 16. 수정 2"},{"hash":"b1e6b6ff2f6b5b41925daaea79d1003337bd9698","date":1721905792000,"email":"yongwon0824@naver.com","author":"ChoiYongWon","message":"07. 16. 수정"},{"hash":"d129d11b2b0abffbdb0b2a814d4666901f6a5c22","date":1721826606000,"email":"yongwon0824@naver.com","author":"ChoiYongWon","message":"07. 24. 비즈니스 로직 분리"},{"hash":"c75b19955aab8b3c94f8d55426067ff3f9986688","date":1721385827000,"email":"yongwon0824@naver.com","author":"ChoiYongWon","message":"07. 19."},{"hash":"de690612a67a43737acad5e0e959da4ca42ff774","date":1721122769000,"email":"yongwon0824@naver.com","author":"ChoiYongWon","message":"07. 16."},{"hash":"2376710ad99208126a7ea908fee9db135b004ade","date":1720976443000,"email":"yongwon0824@naver.com","author":"ChoiYongWon","message":"h 수정"},{"hash":"b10380b349960c97ac398814a1e4ff4ab46cc798","date":1720962484000,"email":"yongwon0824@naver.com","author":"ChoiYongWon","message":"07. 14."},{"hash":"381ea6f592674a94d8e0c2e465da03757ae66d0d","date":1720881400000,"email":"yongwon0824@naver.com","author":"ChoiYongWon","message":"07. 13. 추가"},{"hash":"23f04f4211a5c6fd758d310e53e1dc969c9e5cdd","date":1720793705000,"email":"yongwon0824@naver.com","author":"ChoiYongWon","message":"07. 07. 수정"},{"hash":"acd4486bd01100e69b92c86654694450138062ff","date":1720622218000,"email":"yongwon0824@naver.com","author":"ChoiYongWon","message":"주제 틀"},{"hash":"a4b983797270ecebafe7868d1e0bb1ec76c46ef3","date":1720531029000,"email":"yongwon0824@naver.com","author":"ChoiYongWon","message":"07. 08. 제거"},{"hash":"8e7191dd2183cc71e4e25ac4e17f84e42240cd00","date":1720414966000,"email":"yongwon0824@naver.com","author":"ChoiYongWon","message":"07. 06. Javascript Runtime 구성 요소 및 관리 주체"},{"hash":"7b45bcaa20c989920f5058d5d567e4bfeebb2463","date":1720363932000,"email":"yongwon0824@naver.com","author":"ChoiYongWon","message":"07. 08."},{"hash":"cfff0958cbf80302ec719ecd06894e5d20957ee1","date":1720272865000,"email":"yongwon0824@naver.com","author":"ChoiYongWon","message":"07. 04. 좀 더 공부가 필요한 부분 정리"},{"hash":"fdc68d840504e6d20b78c556dcf3ef6e22cb5fa2","date":1720172513000,"email":"yongwon0824@naver.com","author":"ChoiYongWon","message":"07. 04. 오타 수정"},{"hash":"ef643edbbc21e32bf5a1b8c02d3d204bda7b700d","date":1720091348000,"email":"yongwon0824@naver.com","author":"ChoiYongWon","message":"07. 04. NextJS에서 서버 컴포넌트를 렌더링하는 방법"},{"hash":"31ffffb53f8e34cfe9648e1c808a79d2d5d206c1","date":1719843235000,"email":"yongwon0824@naver.com","author":"ChoiYongWon","message":"07 .01."}]},"filePathRelative":"archives/2024_07.md"}');export{l as comp,h as data};
